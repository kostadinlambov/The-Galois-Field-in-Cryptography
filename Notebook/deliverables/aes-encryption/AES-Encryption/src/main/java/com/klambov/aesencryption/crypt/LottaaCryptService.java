package com.klambov.aesencryption.crypt;

public interface LottaaCryptService {

  /**
   * Encrypts and adds an authentication tag the given content.
   *
   * @param dataToEncrypt input data to encrypt
   * @return encrypted content as a Base64-String
   * @throws LottaaCryptException if any crypto fails
   */
  String encryptStringData(String dataToEncrypt) throws LottaaCryptException;

  /**
   * Encrypts and adds an authentication tag the given content.
   *
   * @param dataToEncrypt     input data to encrypt
   * @param associatedDataStr additional data used to create the auth tag and will be subject to
   *                          integrity/authentication check. This parameter is optional. If you
   *                          don't want to use it, you can pass null as value. Important - you need
   *                          to use the same associatedData for both actions (encryption and
   *                          decryption). If the associatedData is NOT the same, an {@link
   *                          LottaaCryptException} will be thrown.
   * @return encrypted content as a Base64-String
   * @throws LottaaCryptException if any crypto fails
   */
  String encryptStringData(String dataToEncrypt, String associatedDataStr)
      throws LottaaCryptException;

  /**
   * Decrypt and verifies the authenticity of given encrypted data
   *
   * @param dataToDecryptB64 to decrypt. The data must be a Base64-String
   * @return decrypted, original data
   * @throws LottaaCryptException if any crypto fails
   */
  String decryptBase64StringData(String dataToDecryptB64) throws LottaaCryptException;

  /**
   * Decrypt and verifies the authenticity of given encrypted data
   *
   * @param dataToDecryptB64  to decrypt. The data must be a Base64-String
   * @param associatedDataStr additional data used to create the auth tag; must be same as provided
   *                          in the encrypt step. This parameter is optional. If you don't want to
   *                          use it, you can pass null as value.
   * @return decrypted, original data
   * @throws LottaaCryptException if any crypto fails
   */
  String decryptBase64StringData(String dataToDecryptB64, String associatedDataStr)
      throws LottaaCryptException;

  /**
   * Generates a 128 bit key. The key is randomly generated byte[] and converted to Base64-String
   *
   * @return generated key as a Base64-String
   */
  String generate128BitRandomKey();

}
